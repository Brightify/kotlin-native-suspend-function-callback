buildscript {

    ext.buildMaven = { p -> repositories { maven { url p } } }


    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
    id("maven-publish")
}
apply plugin: 'com.jfrog.bintray'

group = "de.ffuf.kotlin.multiplatform.annotations"
version = 1.0.19

repositories {

    jcenter()
    mavenCentral()
}


task emptyJar(type: Jar) {
}

task emptySourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets
}

task stubJavadoc(type: Jar) {
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets
}


def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id "Jonas Bark"
            name "Jonas Bark"
            organization "FFUF"
            organizationUrl "http://twitter.com/boni2k"
        }
        developer {
            id "FFUF"
            name "Feil Feil & Feil GmbH"
            organization "FFUF"
            organizationUrl "http://www.ffuf.de"
        }
    }
    scm {
        url "https://github.com/feilfeilundfeil/kotlin-native-suspend-function-callback"
    }
}



project.ext.configureMavenCentralMetadata = { pom ->
    def root = asNode()
    root.appendNode('name', "kotlin-native-suspend-function-callback-annotations")
    root.appendNode('description', 'Annotations for kotlin-native-suspend-function-callback')
    root.appendNode('url', 'https://ffuf.de')
    root.children().last() + pomConfig

    def dependenciesNode = asNode().getAt("dependencies")[0]
    if (dependenciesNode != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', "$group")
        dependencyNode.appendNode('artifactId', "$project.name")
        dependencyNode.appendNode('version', "$project.version")
    }
}

kotlin {
    jvm {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            //artifact(sourcesJar)
        }
    }
    js()
    iosX64 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
            //artifact(sourcesJar)
        }
    }
    iosArm64 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
        }
    }
    iosArm32 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
            //artifact(sourcesJar)
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')

            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        iosX64Main {
            dependencies {

            }
        }

        iosArm64Main {
            dependencies {

            }
        }

    }
}

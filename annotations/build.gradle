buildscript {

    ext.buildMaven = { p -> repositories { maven { url p } } }


    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
    }

}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.72'
    id("maven-publish")
}
apply plugin: 'com.jfrog.bintray'

group = "de.ffuf.kotlin.multiplatform.annotations"
version = plugin_version

repositories {

    jcenter()
    mavenCentral()
}


task emptyJar(type: Jar) {
}

task emptySourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets
}

task stubJavadoc(type: Jar) {
    classifier 'javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets
}


def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    developers {
        developer {
            id "Jonas Bark"
            name "Jonas Bark"
            organization "FFUF"
            organizationUrl "http://twitter.com/boni2k"
        }
        developer {
            id "FFUF"
            name "Feil Feil & Feil GmbH"
            organization "FFUF"
            organizationUrl "http://www.ffuf.de"
        }
    }
    scm {
        url "https://github.com/feilfeilundfeil/kotlin-native-suspend-function-callback"
    }
}



project.ext.configureMavenCentralMetadata = { pom ->
    def root = asNode()
    root.appendNode('name', "kotlin-native-suspend-function-callback-annotations")
    root.appendNode('description', 'Annotations for kotlin-native-suspend-function-callback')
    root.appendNode('url', 'https://ffuf.de')
    root.children().last() + pomConfig

    def dependenciesNode = asNode().getAt("dependencies")[0]
    if (dependenciesNode != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', "$group")
        dependencyNode.appendNode('artifactId', "$project.name")
        dependencyNode.appendNode('version', "$project.version")
    }
}

kotlin {
    jvm {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            //artifact(sourcesJar)
        }
    }
    js()
    iosX64 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
            //artifact(sourcesJar)
        }
    }
    iosArm64 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
        }
    }
    iosArm32 {
        mavenPublication {
            pom.withXml(configureMavenCentralMetadata)
            artifact(emptyJar)
            //artifact(sourcesJar)
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')

            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        iosX64Main {
            dependencies {

            }
        }

        iosArm64Main {
            dependencies {

            }
        }

    }
}

build.finalizedBy(publishToMavenLocal)
publishing {
    publications {
        kotlinMultiplatform {
            artifactId = "annotations"
            artifact(emptyJar)
        }
    }
    repositories {
        maven {
            //url "${System.getProperty('user.home')}/.m2/repository"
            url 'https://api.bintray.com/maven/jonasbark/ffuf/kotlin-native-suspend-function-callback-annotations'
            credentials {
                username = bintray_user
                password = bintray_api_key
            }
        }
    }
}

/*def selectArtifactId(project, type, defaultName) {
    def name = project.name

    switch (type) {
        case 'metadata':
            return "$name"
            break
        case 'kotlinMultiplatform':
            return "$name-native"
            break
        case 'jvm':
            return "$name-jvm"
            break
        default:
            return defaultName// : "$name"
            break
    }
}

publishing {
    publications.all {
        pom.withXml(configureMavenCentralMetadata)

        def type = it.name
        def id = selectArtifactId(project, type, it.artifactId)
        it.artifactId = id
        if (id.endsWith('native')) {
            it.artifact stubJavadoc
            it.artifact emptySourceJar
            it.artifact emptyJar
        }
    }

    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            publication.artifact stubJavadoc

            if (target.platformType.name != 'native') {
                publication.moduleDescriptorGenerator = null
            } else {
                publication.artifact emptyJar
            }
        }
    }

    // Disable gradle metadata in root jvm modules
    def hasNative = project.ext.has("hasNative") && project.ext.hasNative
    if (!hasNative) {
        def rootPublication = publishing.publications.findByName('kotlinMultiplatform')
        rootPublication.moduleDescriptorGenerator = null
    }
}*/

/*bintray {
    user = bintray_user
    key = bintray_api_key
    pkg {
        repo = "ffuf"
        name = "kotlin-native-suspend-function-callback-annotations"
        licenses = ['Apache-2.0']
        websiteUrl = "https://ffuf.de"
        vcsUrl = 'https://github.com/feilfeilundfeil/kotlin-native-suspend-function-callback'
        version {
            name = project.version
            desc = 'Initial bintray release'
            released = new Date()
        }

    }
}

bintrayUpload.doFirst {
    publications = []
    def projectPublications = project.publishing.publications
    for (publication in projectPublications) {
        if (publication.artifactId.endsWith("-test")) {
            continue
        }
        publications += publication.name
    }
}*/
bintrayUpload.dependsOn(publishToMavenLocal)
